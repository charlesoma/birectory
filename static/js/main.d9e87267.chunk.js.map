{"version":3,"sources":["actions/actionTypes.js","actions/actions.js","components/Header.js","components/Home.js","components/Dashboard.js","components/Login.js","reducers/reducers.js","reducers/index.js","App.js","store/index.js","serviceWorker.js","index.js"],"names":["LOGIN_ACTION_TYPES","GET_DATA_ACTION_TYPES","GET_CATEGORY_ACTION_TYPES","LOGIN_REQUEST","LOGIN_FULFILLED","LOGIN_REJECTED","GET_DATA_REQUEST","GET_DATA_FULFILLED","SAVE_DATA_REQUEST","SAVE_DATA_FULFILLED","SAVE_DATA_REJECTED","SAVE_CATEGORY_REQUEST","SAVE_CATEGORY_FULFILLED","SAVE_CATEGORY_REJECTED","GET_CATEGORY_REQUEST","GET_CATEGORY_FULFILLED","UPDATE_DATA_REQUEST","UPDATE_DATA_FULFILLED","UPDATE_DATA_REJECTED","DELETE_DATA_REQUEST","DELETE_DATA_FULFILLED","login","data","dispatch","a","loginRequest","email","password","localStorage","setItem","loginFulfilled","loginRejected","getData","getDataRequest","result","getItem","getDataFulfilled","saveData","saveDataRequest","existingEntries","JSON","parse","entry","name","description","phone","website","imgUrl","categorySelected","push","stringify","saveDataFulfilled","console","log","saveDataRejected","type","user","payload","saveCategoryRequest","saveCategoryFulfilled","saveCategoryRejected","getCategoryRequest","getCategoryFulfilled","updateDataRequest","updateDataFulfilled","updateDataRejected","deleteDataRequest","deleteDataFulfilled","Header","logout","removeItem","props","history","pathname","id","to","style","textDecoration","onClick","this","Component","withRouter","Home","state","directories","searchHandler","event","results","reverse","filter","Object","values","some","val","toLowerCase","includes","target","value","setState","length","className","placeholder","onChange","map","item","i","key","alt","src","width","height","connect","Dashboard","category","edit","index","categories","handleChange","e","handleCheck","checked","indexOf","splice","updateDirectory","preventDefault","updateData","componentDidMount","createCategory","saveCategory","deleteDirectory","deleteData","editDirectory","getCategory","onSubmit","text","Login","error","handleLogin","GET_DATA_REJECTED","initialState","reducers","action","combineReducers","store","middleware","thunk","createStore","rootReducer","compose","applyMiddleware","configureStore","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAAaA,EACM,gBADNA,EAEQ,kBAFRA,EAGO,iBAGPC,EACS,mBADTA,EAEW,qBAFXA,EAGU,oBAeVC,EACa,uBADbA,EAEe,yBCf3BC,EAGGH,EAFHI,EAEGJ,EADHK,EACGL,EAGHM,EAEGL,EADHM,EACGN,EAGHO,EDTsB,oBCUtBC,EDTwB,sBCUxBC,EDTuB,qBCavBC,EDT0B,wBCU1BC,EDT4B,0BCU5BC,EDT2B,yBCa3BC,EAEGZ,EADHa,EACGb,EAGHc,EDRwB,sBCSxBC,EDR0B,wBCS1BC,EDRyB,uBCYzBC,EDRwB,sBCSxBC,EDR0B,wBCWrBC,EAAQ,SAAAC,GACb,8CAAO,WAAOC,GAAP,SAAAC,EAAA,sDACND,EAASE,KACU,oBAAfH,EAAKI,OAAiD,iBAAlBJ,EAAKK,UAC5CC,aAAaC,QAAQ,QAAS,SAC9BN,EAASO,MAETP,EAASQ,EAAc,qBANlB,2CAAP,mDAAM,IAWDC,EAAU,WACf,8CAAO,WAAOT,GAAP,eAAAC,EAAA,sDACND,EAASU,KAEM,QADXC,EAASN,aAAaO,QAAQ,kBACbD,EAAS,IAC9BX,EAASa,EAAiBF,IAJpB,2CAAP,mDAAM,IAQDG,EAAW,SAAAf,GAChB,8CAAO,WAAOC,GAAP,iBAAAC,EAAA,sDACND,EAASe,KACLhB,GAEqB,QADpBiB,EAAkBC,KAAKC,MAAMb,aAAaO,QAAQ,mBACxBI,EAAkB,IAC5CG,EAAQ,CACX,KAAQpB,EAAKqB,KACb,YAAerB,EAAKsB,YACpB,MAAStB,EAAKuB,MACd,MAASvB,EAAKI,MACd,QAAWJ,EAAKwB,QAChB,OAAUxB,EAAKyB,OACf,iBAAoBzB,EAAK0B,kBAE1BT,EAAgBU,KAAKP,GACrBd,aAAaC,QAAQ,cAAeW,KAAKU,UAAUX,IAEnDhB,EAAS4B,OAETC,QAAQC,IAAI,6BACZ9B,EAAS+B,OApBJ,2CAAP,mDAAM,IA4FD7B,EAAe,iBAAO,CAC3B8B,KAAMpD,IAGD2B,EAAiB,SAAA0B,GAAI,MAAK,CAC/BD,KAAMnD,EACNqD,QAASD,IAGJzB,EAAgB,SAACT,GAAD,MAAW,CAChCiC,KAAMlD,EACNoD,QAASnC,IAGJW,EAAiB,iBAAO,CAC7BsB,KAAMjD,IAGD8B,EAAmB,SAACd,GAAD,MAAW,CACnCiC,KAAMhD,EACNkD,QAASnC,IAGJgB,EAAkB,iBAAO,CAC9BiB,KAAM/C,IAGD2C,EAAoB,SAAA7B,GAAI,MAAK,CAClCiC,KAAM9C,EACNgD,QAASnC,IAGJgC,GAAmB,iBAAO,CAC/BC,KAAM7C,IAGDgD,GAAsB,iBAAO,CAClCH,KAAM5C,IAGDgD,GAAwB,SAAArC,GAAI,MAAK,CACtCiC,KAAM3C,EACN6C,QAASnC,IAGJsC,GAAuB,iBAAO,CACnCL,KAAM1C,IAGDgD,GAAqB,iBAAO,CACjCN,KAAMzC,IAGDgD,GAAuB,SAACxC,GAAD,MAAW,CACvCiC,KAAMxC,EACN0C,QAASnC,IAGJyC,GAAoB,iBAAO,CAChCR,KAAMvC,IAGDgD,GAAsB,SAAA1C,GAAI,MAAK,CACpCiC,KAAMtC,EACNwC,QAASnC,IAGJ2C,GAAqB,iBAAO,CACjCV,KAAMrC,IAGDgD,GAAoB,iBAAO,CAChCX,KAAMpC,IAGDgD,GAAsB,SAAA7C,GAAI,MAAK,CACpCiC,KAAMnC,EACNqC,QAASnC,IC7OJ8C,G,2MACFC,OAAS,WACLzC,aAAa0C,WAAW,SACxB,EAAKC,MAAMC,QAAQvB,KAAK,CACpBwB,SAAU,O,wEAKd,OACI,yBAAKC,GAAG,UAEkC,UAAlC9C,aAAaO,QAAQ,UACrB,kBAAC,IAAD,CAAMwC,GAAG,aAAaC,MAAO,CAAEC,eAAgB,SAC3C,6BACI,0CAK0B,UAAlCjD,aAAaO,QAAQ,SACjB,yBAAK2C,QAASC,KAAKV,QACf,sCAGJ,kBAAC,IAAD,CAAMM,GAAG,SAASC,MAAO,CAAEC,eAAgB,SACvC,6BACI,2C,GA3BXG,aAoCNC,eAAWb,IClCpBc,G,2MACFC,MAAQ,CACJxC,KAAM,GACNC,YAAa,GACbC,MAAO,GACPnB,MAAO,GACPoB,QAAS,GACTsC,YAAa,I,EAYjBC,cAAgB,SAACC,GACb,IACMC,EADc/C,KAAKC,MAAM,EAAK8B,MAAMa,aAAaI,UAC3BC,QAAO,SAAA/C,GAAK,OAAIgD,OAAOC,OAAOjD,GAAOkD,MAAK,SAAAC,GAAG,MAAmB,kBAARA,GAAoBA,EAAIC,cAAcC,SAAST,EAAMU,OAAOC,aAChJ,EAAKC,SAAS,CACVd,YAAaG,K,6MAZXR,KAAKR,MAAMvC,U,OACb+C,KAAKR,MAAMa,YAAYe,OAAS,GAChCpB,KAAKmB,SAAS,CACVd,YAAa5C,KAAKC,MAAMsC,KAAKR,MAAMa,aAAaI,Y,qIAalD,IACEJ,EAAgBL,KAAKI,MAArBC,YACR,OACI,yBAAKV,GAAG,QACJ,kBAAC,GAAD,MACA,yBAAK0B,UAAU,WAEPxE,aAAaO,QAAQ,gBACrB,yBAAKiE,UAAU,aACX,2BAAO7C,KAAK,OAAO8C,YAAY,SAASD,UAAU,SAASE,SAAUvB,KAAKM,iBAI9ED,EAAYmB,KAAI,SAACC,EAAMC,GAAP,OACZ,yBAAKC,IAAKD,EAAGL,UAAU,iBACnB,oCAAUI,EAAK7D,MACf,2CAAiB6D,EAAK5D,aACtB,4CAAkB4D,EAAK3D,OACvB,qCAAW2D,EAAK9E,OAChB,uCAAa8E,EAAK1D,SAClB,yBAAKsD,UAAU,UAAf,eAAqCI,EAAKxD,kBAAoBwD,EAAKxD,iBAAiBuD,KAAI,SAACC,EAAMC,GAAP,OAAa,yBAAKC,IAAKD,EAAGL,UAAU,YAAYI,OACxI,yBAAKG,IAAI,GAAGC,IAAMJ,EAAKzD,OAA6CyD,EAAKzD,OAAzC,kCAAiD8D,MAAO,IAAKC,OAAQ,UAK7G1B,EAAYe,OAAS,GACrB,yBAAKC,UAAU,iBACX,4D,GAvDTpB,aAyEJ+B,gBAJS,SAAA5B,GAAK,MAAK,CAC9BC,YAAaD,EAAM7D,KAAK8D,gBAND,SAAA7D,GAAQ,MAAK,CACpCS,QAAS,kBAAMT,EAASS,MACxBK,SAAU,SAACf,GAAD,OAAUC,EAASc,EAASf,QAO3ByF,CAGb7B,I,SCnEI8B,G,2MACF7B,MAAQ,CACJxC,KAAM,GACNC,YAAa,GACbC,MAAO,GACPnB,MAAO,GACPoB,QAAS,GACTmE,SAAU,GACVC,MAAM,EACNC,MAAO,GACPpE,OAAQ,GACRC,iBAAkB,GAClBoC,YAAa,GACbgC,WAAY,I,EAYhBC,aAAe,SAAC1E,EAAM2E,GAClB,EAAKpB,SAAL,gBACKvD,EAAO2E,EAAEtB,OAAOC,S,EAIzBsB,YAAc,SAACD,GACX,IACIH,EADEnE,EAAmB,EAAKmC,MAAMnC,iBAGhCsE,EAAEtB,OAAOwB,QACTxE,EAAiBC,KAAKqE,EAAEtB,OAAOC,QAE/BkB,EAAQnE,EAAiByE,QAAQH,EAAEtB,OAAOC,OAC1CjD,EAAiB0E,OAAOP,EAAO,IAGnC,EAAKjB,SAAS,CAAElD,iBAAkBA,K,EAGtC2E,gB,uCAAkB,WAAOL,GAAP,+BAAA9F,EAAA,yDACd8F,EAAEM,iBADY,EAEwE,EAAKzC,MAAnFxC,EAFM,EAENA,KAAMC,EAFA,EAEAA,YAAaC,EAFb,EAEaA,MAAOnB,EAFpB,EAEoBA,MAAOoB,EAF3B,EAE2BA,QAASE,EAFpC,EAEoCA,iBAAkBmE,EAFtD,EAEsDA,MAAOpE,EAF7D,EAE6DA,OAC9D,KAATJ,GAA+B,KAAhBC,GAAgC,KAAVC,GAA0B,KAAVnB,GAA4B,KAAZoB,GAAkBE,IAAqB,GAHlG,qDAOV,EAAKmC,MAAM+B,KAPD,gCAQJ,EAAK3C,MAAMsD,WAAW,CAAElF,OAAMC,cAAaC,QAAOnB,QAAOoB,UAASC,SAAQC,oBAAoBmE,GAR1F,+CAUJ,EAAK5C,MAAMlC,SAAS,CAAEM,OAAMC,cAAaC,QAAOnB,QAAOoB,UAASC,SAAQC,qBAVpE,QAad,EAAKkD,SAAS,CACVgB,MAAM,EACNvE,KAAM,GACNC,YAAa,GACbC,MAAO,GACPnB,MAAO,GACPoB,QAAS,GACTC,OAAQ,GACRoE,MAAO,KAEX,EAAKW,oBAvBS,4C,wDA0BlBC,e,uCAAiB,WAAOT,GAAP,eAAA9F,EAAA,yDACb8F,EAAEM,iBAEe,MADTX,EAAa,EAAK9B,MAAlB8B,UAFK,iEAOP,EAAK1C,MAAMyD,aAAa,CAAEf,aAPnB,OAQb,EAAKa,oBARQ,2C,wDAWjBG,gBAAkB,SAACxB,GACf,EAAKlC,MAAM2D,WAAWzB,GACtB,EAAKqB,qB,EAGTK,cAAgB,SAAC1B,EAAGD,GAChB,EAAKN,SAAS,CACVgB,MAAM,EACNvE,KAAM6D,EAAK7D,KACXC,YAAa4D,EAAK5D,YAClBC,MAAO2D,EAAK3D,MACZnB,MAAO8E,EAAK9E,MACZoB,QAAS0D,EAAK1D,QACdqE,MAAOV,K,6MA9EL1B,KAAKR,MAAMvC,U,uBACX+C,KAAKR,MAAM6D,c,OACjBrD,KAAKmB,SAAS,CACVd,YAAaL,KAAKR,MAAMa,YAAYe,OAAS,EAAI3D,KAAKC,MAAMsC,KAAKR,MAAMa,aAAaI,UAAY,GAChG4B,WAAYrC,KAAKR,MAAM6C,WAAWjB,OAAS,EAAI3D,KAAKC,MAAMsC,KAAKR,MAAM6C,YAAc,K,qIA8EjF,IAAD,SAWDrC,KAAKI,MATLC,EAFC,EAEDA,YACAgC,EAHC,EAGDA,WACAzE,EAJC,EAIDA,KACAC,EALC,EAKDA,YACAC,EANC,EAMDA,MACAnB,EAPC,EAODA,MACAoB,EARC,EAQDA,QACAoE,EATC,EASDA,KACAnE,EAVC,EAUDA,OAGJ,MAAc,UADAnB,aAAaO,QAAQ,SAExB,kBAAC,IAAD,CAAUwC,GAAI,WAGrB,yBAAKD,GAAG,QACJ,kBAAC,GAAD,MACA,yBAAK0B,UAAU,WACX,yBAAKA,UAAU,SACX,0BAAMiC,SAAUtD,KAAK4C,iBACjB,2BAAOvB,UAAU,QAAQC,YAAY,aAAa9C,KAAM,OAAQ0C,MAAOtD,EAAM2D,SAAU,SAAAgC,GAAI,OAAI,EAAKjB,aAAa,OAAQiB,MACzH,2BAAOlC,UAAU,QAAQC,YAAY,oBAAoB9C,KAAM,OAAQ0C,MAAOrD,EAAa0D,SAAU,SAAAgC,GAAI,OAAI,EAAKjB,aAAa,cAAeiB,MAC9I,2BAAOlC,UAAU,QAAQC,YAAY,qBAAqB9C,KAAM,OAAQ0C,MAAOpD,EAAOyD,SAAU,SAAAgC,GAAI,OAAI,EAAKjB,aAAa,QAASiB,MACnI,2BAAOlC,UAAU,QAAQC,YAAY,cAAc9C,KAAM,OAAQ0C,MAAOvE,EAAO4E,SAAU,SAAAgC,GAAI,OAAI,EAAKjB,aAAa,QAASiB,MAC5H,2BAAOlC,UAAU,QAAQC,YAAY,gBAAgB9C,KAAM,OAAQ0C,MAAOnD,EAASwD,SAAU,SAAAgC,GAAI,OAAI,EAAKjB,aAAa,UAAWiB,MAClI,2BAAOlC,UAAU,QAAQC,YAAY,kBAAkB9C,KAAM,OAAQ0C,MAAOlD,EAAQuD,SAAU,SAAAgC,GAAI,OAAI,EAAKjB,aAAa,SAAUiB,MAClI,yBAAKlC,UAAU,cAEPgB,EAAWb,KAAI,SAACC,EAAMC,GAAP,OACX,yBAAKC,IAAKD,EAAGL,UAAU,YACnB,2BAAII,EAAKS,UACT,2BAAOhB,MAAOO,EAAKS,SAAUX,SAAU,EAAKiB,YAAahE,KAAK,iBAKtE6D,EAAWjB,OAAS,GACpB,uBAAGC,UAAU,SAAb,mCAGR,2BAAOA,UAAU,QAAQ7C,KAAM,SAAU0C,MAAOiB,EAAO,eAAiB,oBAE5E,0BAAMmB,SAAUtD,KAAKgD,gBACjB,2BAAO3B,UAAU,QAAQC,YAAY,iBAAiB9C,KAAM,OAAQ+C,SAAU,SAAAgC,GAAI,OAAI,EAAKjB,aAAa,WAAYiB,MACpH,2BAAOlC,UAAU,QAAQ7C,KAAM,SAAU0C,MAAM,sBAInDb,EAAYmB,KAAI,SAACC,EAAMC,GAAP,OACZ,yBAAKC,IAAKD,EAAGL,UAAU,iBACnB,yBAAKA,UAAU,SAAStB,QAAS,kBAAM,EAAKmD,gBAAgBxB,KAA5D,QACA,yBAAKL,UAAU,OAAOtB,QAAS,kBAAM,EAAKqD,cAAc1B,EAAGD,KAA3D,QACA,oCAAUA,EAAK7D,MACf,2CAAiB6D,EAAK5D,aACtB,4CAAkB4D,EAAK3D,OACvB,qCAAW2D,EAAK9E,OAChB,uCAAa8E,EAAK1D,SAClB,yBAAKsD,UAAU,UAAf,eAAqCI,EAAKxD,kBAAoBwD,EAAKxD,iBAAiBuD,KAAI,SAACC,EAAMC,GAAP,OAAa,yBAAKC,IAAKD,EAAGL,UAAU,YAAYI,OACxI,yBAAKG,IAAI,GAAGC,IAAOJ,EAAKzD,OAA6CyD,EAAKzD,OAAzC,kCAAiD8D,MAAO,IAAKC,OAAQ,gB,GA/J9G9B,aAwLT+B,gBALS,SAAA5B,GAAK,MAAK,CAC9BC,YAAaD,EAAM7D,KAAK8D,YACxBgC,WAAYjC,EAAM7D,KAAK8F,eAZA,SAAA7F,GAAQ,MAAK,CACpCF,MAAO,SAACC,GAAD,OAAUC,EAASF,EAAMC,KAChCU,QAAS,kBAAMT,EAASS,MACxBK,SAAU,SAACf,GAAD,OAAUC,EAASc,EAASf,KACtC0G,aAAc,SAAC1G,GAAD,OAAUC,EH3FP,SAAAD,GACpB,8CAAO,WAAOC,GAAP,iBAAAC,EAAA,sDACND,EAASmC,MACLpC,GAEqB,QADpBiB,EAAkBC,KAAKC,MAAMb,aAAaO,QAAQ,kBACxBI,EAAkB,IAC5CG,EAAQ,CACX,SAAYpB,EAAK2F,UAElB1E,EAAgBU,KAAKP,GACrBd,aAAaC,QAAQ,aAAcW,KAAKU,UAAUX,IAElDhB,EAASoC,QAETP,QAAQC,IAAI,6BACZ9B,EAASqC,OAdJ,2CAAP,mDAAM,GG0F8BoE,CAAa1G,KAC9C8G,YAAa,kBAAM7G,EHvEtB,uCAAO,WAAOA,GAAP,eAAAC,EAAA,sDACND,EAASsC,MAEM,QADX3B,EAASN,aAAaO,QAAQ,iBACbD,EAAS,IAC9BX,EAASuC,GAAqB5B,IAJxB,2CAAP,mDAAM,KGwEHgG,WAAY,SAAC5G,GAAD,OAAUC,EHtCP,SAAAD,GAClB,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sDACND,EAAS2C,OACL3B,EAAkBC,KAAKC,MAAMb,aAAaO,QAAQ,iBACtCqD,UAAUkC,OAAOpG,EAAM,GACvCM,aAAaC,QAAQ,cAAeW,KAAKU,UAAUX,EAAgBiD,YACnEjE,EAAS4C,MALH,2CAAP,mDAAM,GGqC4B+D,CAAW5G,KAC1CuG,WAAY,SAACvG,EAAMmF,GAAP,OAAalF,EHjEV,SAACD,EAAMmF,GACzB,8CAAO,WAAOlF,GAAP,iBAAAC,EAAA,sDACND,EAASwC,MACLzC,GAEqB,QADpBiB,EAAkBC,KAAKC,MAAMb,aAAaO,QAAQ,mBACxBI,EAAkB,IAC5CG,EAAQ,CACX,KAAQpB,EAAKqB,KACb,YAAerB,EAAKsB,YACpB,MAAStB,EAAKuB,MACd,MAASvB,EAAKI,MACd,QAAWJ,EAAKwB,QAChB,OAAUxB,EAAKyB,OACf,iBAAoBzB,EAAK0B,kBAE1BT,EAAgBiD,UAAUiB,GAAK/D,EAC/Bd,aAAaC,QAAQ,cAAeW,KAAKU,UAAUX,EAAgBiD,YAEnEjE,EAASyC,QAETZ,QAAQC,IAAI,4BACZ9B,EAAS0C,OApBJ,2CAAP,mDAAM,GGgE+B4D,CAAWvG,EAAMmF,QAQxCM,CAGbC,ICpMIuB,G,2MACFpD,MAAQ,CACJzD,MAAO,GACPC,SAAU,GACV6G,MAAO,I,EAGXnB,aAAe,SAAC1E,EAAM2E,GAAO,IAAD,EACxB,EAAKpB,UAAL,oBACKvD,EAAO2E,EAAEtB,OAAOC,OADrB,uBAEW,IAFX,K,EAMJwC,Y,uCAAc,WAAOnB,GAAP,mBAAA9F,EAAA,yDACV8F,EAAEM,iBADQ,EAEkB,EAAKzC,MAAzBzD,EAFE,EAEFA,MAAOC,EAFL,EAEKA,SACD,KAAVD,GAA6B,KAAbC,EAHV,iEAOJ,EAAK4C,MAAMlD,MAAM,CAAEK,QAAOC,aAPtB,OAQ4B,UAAlCC,aAAaO,QAAQ,UACrB,EAAKoC,MAAMC,QAAQvB,KAAK,CACpBwB,SAAU,MAGd,EAAKF,MAAMiE,OACX,EAAKtC,SAAS,CACVsC,MAAO,EAAKjE,MAAMiE,QAfhB,2C,8HAoBJ,IAAD,OACL,OACI,yBAAK9D,GAAG,SACJ,kBAAC,GAAD,MACA,yBAAK0B,UAAU,WACX,0BAAMiC,SAAUtD,KAAK0D,aACjB,2BAAI1D,KAAKI,MAAMqD,OACf,2BAAOpC,UAAU,QAAQC,YAAY,cAAc9C,KAAK,OAAO+C,SAAU,SAAAgC,GAAI,OAAI,EAAKjB,aAAa,QAASiB,MAC5G,2BAAOlC,UAAU,QAAQC,YAAY,iBAAiB9C,KAAK,WAAW+C,SAAU,SAAAgC,GAAI,OAAI,EAAKjB,aAAa,WAAYiB,MACtH,2BAAOlC,UAAU,QAAQ7C,KAAM,SAAU0C,MAAM,iB,GA3CnDjB,aA2DL+B,gBAJS,SAAA5B,GAAK,MAAK,CAC9BqD,MAAOrD,EAAM7D,KAAKkH,UALK,SAAAjH,GAAQ,MAAK,CACpCF,MAAO,SAACC,GAAD,OAAUC,EAASF,EAAMC,QAOrByF,CAGbwB,I,2CC5DDpI,GAGGH,EAFHI,GAEGJ,EADHK,GACGL,EAGHM,GAGGL,EAFHM,GAEGN,EADHyI,GACGzI,EAGHa,GAEGZ,EADHa,GACGb,EAEEyI,GAAe,CACjBvD,YAAa,GACbgC,WAAY,GACZoB,MAAO,IAuDII,GApDE,WAAmC,IAAlCzD,EAAiC,uDAAzBwD,GAAcE,EAAW,uCAC/C,OAAQA,EAAOtF,MAEX,KAAKpD,GACD,OAAO,gBACAgF,EADP,CAEIqD,OAAO,IAGf,KAAKpI,GACD,OAAO,gBACA+E,GAGX,KAAK9E,GACD,OAAO,gBACA8E,EADP,CAEIqD,MAAOK,EAAOpF,UAGtB,KAAKnD,GACD,OAAO,gBACA6E,GAGX,KAAK5E,GACD,OAAO,gBACA4E,EADP,CAEIC,YAAayD,EAAOpF,UAG5B,KAAKiF,GAKL,KAAK5H,GACD,OAAO,gBACAqE,GAGX,KAAKpE,GACD,OAAO,gBACAoE,EADP,CAEIiC,WAAYyB,EAAOpF,UAG3B,QACI,OAAO0B,ICzEJ2D,gBAAgB,CAC3BxH,KAAMsH,KCIJG,GCHwB,WAE1B,IAAMC,EAAa,CAACC,MAEpB,OADcC,aAAYC,GAAaC,aAAQC,KAAe,WAAf,EAAmBL,KDAxDM,GAgBCC,OAdf,WACC,OACC,kBAAC,IAAD,CAAUR,MAAOA,IAChB,6BACC,kBAAC,IAAD,KACM,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,UAAWxE,KACjC,kBAAC,IAAD,CAAOuE,KAAK,aAAaC,UAAW1C,KACpC,kBAAC,IAAD,CAAOyC,KAAK,SAASC,UAAWnB,SENtBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d9e87267.chunk.js","sourcesContent":["export const LOGIN_ACTION_TYPES = {\n    LOGIN_REQUEST: \"LOGIN_REQUEST\",\n    LOGIN_FULFILLED: \"LOGIN_FULFILLED\",\n    LOGIN_REJECTED: \"LOGIN_REJECTED\"\n};\n\nexport const GET_DATA_ACTION_TYPES = {\n    GET_DATA_REQUEST: \"GET_DATA_REQUEST\",\n    GET_DATA_FULFILLED: \"GET_DATA_FULFILLED\",\n    GET_DATA_REJECTED: \"GET_DATA_REJECTED\"\n};\n\nexport const SAVE_DATA_ACTION_TYPES = {\n    SAVE_DATA_REQUEST: \"SAVE_DATA_REQUEST\",\n    SAVE_DATA_FULFILLED: \"SAVE_DATA_FULFILLED\",\n    SAVE_DATA_REJECTED: \"SAVE_DATA_REJECTED\"\n};\n\nexport const SAVE_CATEGORY_ACTION_TYPES = {\n    SAVE_CATEGORY_REQUEST: \"SAVE_CATEGORY_REQUEST\",\n    SAVE_CATEGORY_FULFILLED: \"SAVE_CATEGORY_FULFILLED\",\n    SAVE_CATEGORY_REJECTED: \"SAVE_CATEGORY_REJECTED\"\n};\n\nexport const GET_CATEGORY_ACTION_TYPES = {\n    GET_CATEGORY_REQUEST: \"GET_CATEGORY_REQUEST\",\n    GET_CATEGORY_FULFILLED: \"GET_CATEGORY_FULFILLED\",\n    GET_CATEGORY_REJECTED: \"GET_CATEGORY_REJECTED\"\n};\n\nexport const UPDATE_DATA_ACTION_TYPES = {\n    UPDATE_DATA_REQUEST: \"UPDATE_DATA_REQUEST\",\n    UPDATE_DATA_FULFILLED: \"UPDATE_DATA_FULFILLED\",\n    UPDATE_DATA_REJECTED: \"UPDATE_DATA_REJECTED\"\n};\n\nexport const DELETE_DATA_ACTION_TYPES = {\n    DELETE_DATA_REQUEST: \"DELETE_DATA_REQUEST\",\n    DELETE_DATA_FULFILLED: \"DELETE_DATA_FULFILLED\",\n    DELETE_DATA_REJECTED: \"DELETE_DATA_REJECTED\"\n};","import {\n\tLOGIN_ACTION_TYPES,\n\tGET_DATA_ACTION_TYPES,\n\tSAVE_DATA_ACTION_TYPES,\n\tSAVE_CATEGORY_ACTION_TYPES,\n\tGET_CATEGORY_ACTION_TYPES,\n\tUPDATE_DATA_ACTION_TYPES,\n\tDELETE_DATA_ACTION_TYPES\n} from \"./actionTypes\";\n\nconst {\n\tLOGIN_REQUEST,\n\tLOGIN_FULFILLED,\n\tLOGIN_REJECTED\n} = LOGIN_ACTION_TYPES;\n\nconst {\n\tGET_DATA_REQUEST,\n\tGET_DATA_FULFILLED,\n} = GET_DATA_ACTION_TYPES;\n\nconst {\n\tSAVE_DATA_REQUEST,\n\tSAVE_DATA_FULFILLED,\n\tSAVE_DATA_REJECTED\n} = SAVE_DATA_ACTION_TYPES;\n\nconst {\n\tSAVE_CATEGORY_REQUEST,\n\tSAVE_CATEGORY_FULFILLED,\n\tSAVE_CATEGORY_REJECTED\n} = SAVE_CATEGORY_ACTION_TYPES;\n\nconst {\n\tGET_CATEGORY_REQUEST,\n\tGET_CATEGORY_FULFILLED,\n} = GET_CATEGORY_ACTION_TYPES;\n\nconst {\n\tUPDATE_DATA_REQUEST,\n\tUPDATE_DATA_FULFILLED,\n\tUPDATE_DATA_REJECTED\n} = UPDATE_DATA_ACTION_TYPES;\n\nconst {\n\tDELETE_DATA_REQUEST,\n\tDELETE_DATA_FULFILLED,\n} = DELETE_DATA_ACTION_TYPES;\n\nconst login = data => {\n\treturn async (dispatch) => {\n\t\tdispatch(loginRequest());\n\t\tif (data.email === 'admin@email.com' && data.password === '@Password123') {\n\t\t\tlocalStorage.setItem('token', 'token');\n\t\t\tdispatch(loginFulfilled());\n\t\t} else {\n\t\t\tdispatch(loginRejected('error logging in'));\n\t\t}\n\t};\n};\n\nconst getData = () => {\n\treturn async (dispatch) => {\n\t\tdispatch(getDataRequest());\n\t\tlet result = localStorage.getItem('directories');\n\t\tif (result === null) result = [];\n\t\tdispatch(getDataFulfilled(result));\n\t};\n};\n\nconst saveData = data => {\n\treturn async (dispatch) => {\n\t\tdispatch(saveDataRequest());\n\t\tif (data) {\n\t\t\tlet existingEntries = JSON.parse(localStorage.getItem('directories'));\n\t\t\tif (existingEntries === null) existingEntries = [];\n\t\t\tlet entry = {\n\t\t\t\t\"name\": data.name,\n\t\t\t\t\"description\": data.description,\n\t\t\t\t\"phone\": data.phone,\n\t\t\t\t\"email\": data.email,\n\t\t\t\t\"website\": data.website,\n\t\t\t\t\"imgUrl\": data.imgUrl,\n\t\t\t\t\"categorySelected\": data.categorySelected\n\t\t\t};\n\t\t\texistingEntries.push(entry);\n\t\t\tlocalStorage.setItem('directories', JSON.stringify(existingEntries));\n\n\t\t\tdispatch(saveDataFulfilled());\n\t\t} else {\n\t\t\tconsole.log('error saving to directory')\n\t\t\tdispatch(saveDataRejected());\n\t\t}\n\t};\n};\n\nconst saveCategory = data => {\n\treturn async (dispatch) => {\n\t\tdispatch(saveCategoryRequest());\n\t\tif (data) {\n\t\t\tlet existingEntries = JSON.parse(localStorage.getItem('categories'));\n\t\t\tif (existingEntries === null) existingEntries = [];\n\t\t\tlet entry = {\n\t\t\t\t\"category\": data.category,\n\t\t\t};\n\t\t\texistingEntries.push(entry);\n\t\t\tlocalStorage.setItem('categories', JSON.stringify(existingEntries));\n\n\t\t\tdispatch(saveCategoryFulfilled());\n\t\t} else {\n\t\t\tconsole.log('error saving to directory')\n\t\t\tdispatch(saveCategoryRejected());\n\t\t}\n\t};\n};\n\nconst getCategory = () => {\n\treturn async (dispatch) => {\n\t\tdispatch(getCategoryRequest());\n\t\tlet result = localStorage.getItem('categories');\n\t\tif (result === null) result = [];\n\t\tdispatch(getCategoryFulfilled(result));\n\t};\n};\n\nconst updateData = (data, i) => {\n\treturn async (dispatch) => {\n\t\tdispatch(updateDataRequest());\n\t\tif (data) {\n\t\t\tlet existingEntries = JSON.parse(localStorage.getItem('directories'));\n\t\t\tif (existingEntries === null) existingEntries = [];\n\t\t\tlet entry = {\n\t\t\t\t\"name\": data.name,\n\t\t\t\t\"description\": data.description,\n\t\t\t\t\"phone\": data.phone,\n\t\t\t\t\"email\": data.email,\n\t\t\t\t\"website\": data.website,\n\t\t\t\t\"imgUrl\": data.imgUrl,\n\t\t\t\t\"categorySelected\": data.categorySelected\n\t\t\t};\n\t\t\texistingEntries.reverse()[i] = entry;\n\t\t\tlocalStorage.setItem('directories', JSON.stringify(existingEntries.reverse()));\n\n\t\t\tdispatch(updateDataFulfilled());\n\t\t} else {\n\t\t\tconsole.log('error updating directory')\n\t\t\tdispatch(updateDataRejected());\n\t\t}\n\t};\n};\n\nconst deleteData = data => {\n\treturn async (dispatch) => {\n\t\tdispatch(deleteDataRequest());\n\t\tlet existingEntries = JSON.parse(localStorage.getItem('directories'));\n\t\texistingEntries.reverse().splice(data, 1)\n\t\tlocalStorage.setItem('directories', JSON.stringify(existingEntries.reverse()));\n\t\tdispatch(deleteDataFulfilled());\n\t};\n};\n\n// ACTION CREATORS\n\nconst loginRequest = () => ({\n\ttype: LOGIN_REQUEST,\n});\n\nconst loginFulfilled = user => ({\n\ttype: LOGIN_FULFILLED,\n\tpayload: user\n});\n\nconst loginRejected = (data) => ({\n\ttype: LOGIN_REJECTED,\n\tpayload: data\n});\n\nconst getDataRequest = () => ({\n\ttype: GET_DATA_REQUEST,\n});\n\nconst getDataFulfilled = (data) => ({\n\ttype: GET_DATA_FULFILLED,\n\tpayload: data\n});\n\nconst saveDataRequest = () => ({\n\ttype: SAVE_DATA_REQUEST,\n});\n\nconst saveDataFulfilled = data => ({\n\ttype: SAVE_DATA_FULFILLED,\n\tpayload: data\n});\n\nconst saveDataRejected = () => ({\n\ttype: SAVE_DATA_REJECTED\n});\n\nconst saveCategoryRequest = () => ({\n\ttype: SAVE_CATEGORY_REQUEST,\n});\n\nconst saveCategoryFulfilled = data => ({\n\ttype: SAVE_CATEGORY_FULFILLED,\n\tpayload: data\n});\n\nconst saveCategoryRejected = () => ({\n\ttype: SAVE_CATEGORY_REJECTED\n});\n\nconst getCategoryRequest = () => ({\n\ttype: GET_CATEGORY_REQUEST,\n});\n\nconst getCategoryFulfilled = (data) => ({\n\ttype: GET_CATEGORY_FULFILLED,\n\tpayload: data\n});\n\nconst updateDataRequest = () => ({\n\ttype: UPDATE_DATA_REQUEST,\n});\n\nconst updateDataFulfilled = data => ({\n\ttype: UPDATE_DATA_FULFILLED,\n\tpayload: data\n});\n\nconst updateDataRejected = () => ({\n\ttype: UPDATE_DATA_REJECTED\n});\n\nconst deleteDataRequest = () => ({\n\ttype: DELETE_DATA_REQUEST,\n});\n\nconst deleteDataFulfilled = data => ({\n\ttype: DELETE_DATA_FULFILLED,\n\tpayload: data\n});\n\nexport {\n\tlogin,\n\tgetData,\n\tsaveData,\n\tsaveCategory,\n\tgetCategory,\n\tupdateData,\n\tdeleteData\n}\n","import React, { Component } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\n\nclass Header extends Component {\n    logout = () => {\n        localStorage.removeItem('token');\n        this.props.history.push({\n            pathname: '/',\n        })\n    }\n\n    render() {\n        return (\n            <div id='header'>\n                {\n                    localStorage.getItem('token') === 'token' &&\n                    <Link to=\"/dashboard\" style={{ textDecoration: 'none' }}>\n                        <div>\n                            <p>Dashboard</p>\n                        </div>\n                    </Link>\n                }\n                {\n                    localStorage.getItem('token') === 'token' ?\n                        <div onClick={this.logout}>\n                            <p>Logout</p>\n                        </div>\n                        :\n                        <Link to=\"/login\" style={{ textDecoration: 'none' }}>\n                            <div>\n                                <p>Login</p>\n                            </div>\n                        </Link>\n                }\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Header);\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { saveData, getData } from '../actions/actions';\nimport Header from './Header';\n\nclass Home extends Component {\n    state = {\n        name: '',\n        description: '',\n        phone: '',\n        email: '',\n        website: '',\n        directories: []\n    }\n\n    async componentDidMount() {\n        await this.props.getData()\n        if (this.props.directories.length > 0) {\n            this.setState({\n                directories: JSON.parse(this.props.directories).reverse()\n            })\n        }\n    }\n\n    searchHandler = (event) => {\n        const directories = JSON.parse(this.props.directories).reverse()\n        const results = directories.filter(entry => Object.values(entry).some(val => typeof val === \"string\" && val.toLowerCase().includes(event.target.value)));\n        this.setState({\n            directories: results\n        })\n    }\n\n    render() {\n        const { directories } = this.state\n        return (\n            <div id='home'>\n                <Header />\n                <div className='content'>\n                    {\n                        localStorage.getItem('directories') &&\n                        <div className='searchDiv'>\n                            <input type=\"text\" placeholder='Search' className=\"search\" onChange={this.searchHandler} />\n                        </div>\n                    }\n                    {\n                        directories.map((item, i) => (\n                            <div key={i} className='directoryList'>\n                                <p>Name: {item.name}</p>\n                                <p>Description: {item.description}</p>\n                                <p>Phone number: {item.phone}</p>\n                                <p>Email: {item.email}</p>\n                                <p>Website: {item.website}</p>\n                                <div className='catDiv'>Categories: {item.categorySelected && item.categorySelected.map((item, i) => <div key={i} className='category'>{item}</div>)}</div>\n                                <img alt='' src={!item.imgUrl ? 'https://via.placeholder.com/160' : item.imgUrl} width={160} height={160} />\n                            </div>\n                        ))\n                    }\n                    {\n                        directories.length < 1 &&\n                        <div className='directoryList'>\n                            <p>Oops, nothing to show.</p>\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    getData: () => dispatch(getData()),\n    saveData: (data) => dispatch(saveData(data))\n});\n\nconst mapStateToProps = state => ({\n    directories: state.data.directories,\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home);\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport {\n    login,\n    saveData,\n    getData,\n    saveCategory,\n    getCategory,\n    deleteData,\n    updateData\n} from '../actions/actions';\nimport Header from './Header';\n\nclass Dashboard extends Component {\n    state = {\n        name: '',\n        description: '',\n        phone: '',\n        email: '',\n        website: '',\n        category: '',\n        edit: false,\n        index: '',\n        imgUrl: '',\n        categorySelected: [],\n        directories: [],\n        categories: []\n    }\n\n    async componentDidMount() {\n        await this.props.getData()\n        await this.props.getCategory()\n        this.setState({\n            directories: this.props.directories.length > 0 ? JSON.parse(this.props.directories).reverse() : [],\n            categories: this.props.categories.length > 0 ? JSON.parse(this.props.categories) : [],\n        })\n    }\n\n    handleChange = (name, e) => {\n        this.setState({\n            [name]: e.target.value,\n        });\n    };\n\n    handleCheck = (e) => {\n        const categorySelected = this.state.categorySelected\n        let index\n\n        if (e.target.checked) {\n            categorySelected.push(e.target.value)\n        } else {\n            index = categorySelected.indexOf(e.target.value)\n            categorySelected.splice(index, 1)\n        }\n\n        this.setState({ categorySelected: categorySelected })\n    }\n\n    updateDirectory = async (e) => {\n        e.preventDefault()\n        const { name, description, phone, email, website, categorySelected, index, imgUrl } = this.state;\n        if (name === '' || description === '' || phone === '' || email === '' || website === '' || categorySelected === []) {\n            return\n        }\n\n        if (this.state.edit) {\n            await this.props.updateData({ name, description, phone, email, website, imgUrl, categorySelected }, index)\n        } else {\n            await this.props.saveData({ name, description, phone, email, website, imgUrl, categorySelected })\n        }\n\n        this.setState({\n            edit: false,\n            name: '',\n            description: '',\n            phone: '',\n            email: '',\n            website: '',\n            imgUrl: '',\n            index: ''\n        })\n        this.componentDidMount()\n    }\n\n    createCategory = async (e) => {\n        e.preventDefault()\n        const { category } = this.state;\n        if (category === '') {\n            return\n        }\n\n        await this.props.saveCategory({ category })\n        this.componentDidMount()\n    }\n\n    deleteDirectory = (i) => {\n        this.props.deleteData(i)\n        this.componentDidMount()\n    }\n\n    editDirectory = (i, item) => {\n        this.setState({\n            edit: true,\n            name: item.name,\n            description: item.description,\n            phone: item.phone,\n            email: item.email,\n            website: item.website,\n            index: i\n        })\n    }\n\n    render() {\n        const {\n            directories,\n            categories,\n            name,\n            description,\n            phone,\n            email,\n            website,\n            edit,\n            imgUrl\n        } = this.state\n        const token = localStorage.getItem('token');\n        if (token !== 'token') {\n            return <Redirect to={\"/login\"} />;\n        }\n        return (\n            <div id='home'>\n                <Header />\n                <div className='content'>\n                    <div className='forms'>\n                        <form onSubmit={this.updateDirectory}>\n                            <input className='input' placeholder='Enter name' type={'text'} value={name} onChange={text => this.handleChange(\"name\", text)} />\n                            <input className='input' placeholder='Enter description' type={'text'} value={description} onChange={text => this.handleChange(\"description\", text)} />\n                            <input className='input' placeholder='Enter phone number' type={'text'} value={phone} onChange={text => this.handleChange(\"phone\", text)} />\n                            <input className='input' placeholder='Enter email' type={'text'} value={email} onChange={text => this.handleChange(\"email\", text)} />\n                            <input className='input' placeholder='Enter website' type={'text'} value={website} onChange={text => this.handleChange(\"website\", text)} />\n                            <input className='input' placeholder='Enter image url' type={'text'} value={imgUrl} onChange={text => this.handleChange(\"imgUrl\", text)} />\n                            <div className='categories'>\n                                {\n                                    categories.map((item, i) => (\n                                        <div key={i} className='category'>\n                                            <p>{item.category}</p>\n                                            <input value={item.category} onChange={this.handleCheck} type='checkbox' />\n                                        </div>\n                                    ))\n                                }\n                                {\n                                    categories.length < 1 &&\n                                    <p className='empty'>Create categories on the right</p>\n                                }\n                            </div>\n                            <input className='input' type={'submit'} value={edit ? 'Edit listing' : 'Create listing'} />\n                        </form>\n                        <form onSubmit={this.createCategory}>\n                            <input className='input' placeholder='Enter category' type={'text'} onChange={text => this.handleChange(\"category\", text)} />\n                            <input className='input' type={'submit'} value=\"Create category\" />\n                        </form>\n                    </div>\n                    {\n                        directories.map((item, i) => (\n                            <div key={i} className='directoryList'>\n                                <div className='delete' onClick={() => this.deleteDirectory(i)}>&times;</div>\n                                <div className='edit' onClick={() => this.editDirectory(i, item)}>Edit</div>\n                                <p>Name: {item.name}</p>\n                                <p>Description: {item.description}</p>\n                                <p>Phone number: {item.phone}</p>\n                                <p>Email: {item.email}</p>\n                                <p>Website: {item.website}</p>\n                                <div className='catDiv'>Categories: {item.categorySelected && item.categorySelected.map((item, i) => <div key={i} className='category'>{item}</div>)}</div>\n                                <img alt='' src ={!item.imgUrl ? 'https://via.placeholder.com/160' : item.imgUrl} width={160} height={160} />\n                            </div>\n                        ))\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    login: (data) => dispatch(login(data)),\n    getData: () => dispatch(getData()),\n    saveData: (data) => dispatch(saveData(data)),\n    saveCategory: (data) => dispatch(saveCategory(data)),\n    getCategory: () => dispatch(getCategory()),\n    deleteData: (data) => dispatch(deleteData(data)),\n    updateData: (data, i) => dispatch(updateData(data, i))\n});\n\nconst mapStateToProps = state => ({\n    directories: state.data.directories,\n    categories: state.data.categories\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Dashboard);\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport Header from './Header';\nimport { login } from '../actions/actions';\n\nclass Login extends Component {\n    state = {\n        email: '',\n        password: '',\n        error: ''\n    }\n\n    handleChange = (name, e) => {\n        this.setState({\n            [name]: e.target.value,\n            error: ''\n        });\n    }\n\n    handleLogin = async (e) => {\n        e.preventDefault()\n        const { email, password } = this.state;\n        if (email === '' || password === '') {\n            return\n        }\n\n        await this.props.login({ email, password })\n        if (localStorage.getItem('token') === 'token') {\n            this.props.history.push({\n                pathname: '/',\n            })\n        }\n        if (this.props.error) {\n            this.setState({\n                error: this.props.error\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div id='login'>\n                <Header />\n                <div className='content'>\n                    <form onSubmit={this.handleLogin}>\n                        <p>{this.state.error}</p>\n                        <input className='input' placeholder='Enter email' type='text' onChange={text => this.handleChange(\"email\", text)} />\n                        <input className='input' placeholder='Enter password' type='password' onChange={text => this.handleChange(\"password\", text)} />\n                        <input className='input' type={'submit'} value=\"Login\" />\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    login: (data) => dispatch(login(data)),\n});\n\nconst mapStateToProps = state => ({\n    error: state.data.error,\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Login);\n","import {\n\tLOGIN_ACTION_TYPES,\n\tGET_DATA_ACTION_TYPES,\n    GET_CATEGORY_ACTION_TYPES,\n} from \"../actions/actionTypes\";\n\nconst {\n\tLOGIN_REQUEST,\n\tLOGIN_FULFILLED,\n\tLOGIN_REJECTED\n} = LOGIN_ACTION_TYPES;\n\nconst {\n\tGET_DATA_REQUEST,\n\tGET_DATA_FULFILLED,\n\tGET_DATA_REJECTED\n} = GET_DATA_ACTION_TYPES;\n\nconst {\n\tGET_CATEGORY_REQUEST,\n\tGET_CATEGORY_FULFILLED,\n} = GET_CATEGORY_ACTION_TYPES;\n\nconst initialState = {\n    directories: [],\n    categories: [],\n    error: ''\n}\n\nconst reducers = (state = initialState, action) => {\n    switch (action.type) {\n\n        case LOGIN_REQUEST:\n            return {\n                ...state,\n                error: false\n            }\n\n        case LOGIN_FULFILLED:\n            return {\n                ...state,\n            }\n\n        case LOGIN_REJECTED:\n            return {\n                ...state,\n                error: action.payload\n            }\n\n        case GET_DATA_REQUEST:\n            return {\n                ...state,\n            }\n\n        case GET_DATA_FULFILLED:\n            return {\n                ...state,\n                directories: action.payload\n            }\n\n        case GET_DATA_REJECTED:\n            return {\n                ...state,\n            }\n\n        case GET_CATEGORY_REQUEST:\n            return {\n                ...state,\n            }\n\n        case GET_CATEGORY_FULFILLED:\n            return {\n                ...state,\n                categories: action.payload\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport default reducers;","import { combineReducers } from \"redux\";\n\nimport reducers from './reducers';\n\nexport default combineReducers({\n    data: reducers,\n})","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport Dashboard from './components/Dashboard';\nimport Login from './components/Login';\nimport './App.css';\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"./store/index\";\n\nconst store = configureStore();\n\nfunction App() {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<div>\n\t\t\t\t<Router>\n          <Route exact path='/' component={Home} />\n          <Route path='/dashboard' component={Dashboard} />\n          <Route path='/login' component={Login} />\n\t\t\t\t</Router>\n\t\t\t</div>\n\t\t</Provider>\n\t);\n}\n\nexport default App;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk'\n\nimport rootReducer from '../reducers'\n\nexport const configureStore = () => {\n    // const middleware = [thunk, logger];\n    const middleware = [thunk];\n    const store = createStore(rootReducer, compose(applyMiddleware(...middleware)))\n    return store\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}